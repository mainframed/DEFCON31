created: 20230802033453238
modified: 20230802040505810
tags: 
title: Lab 11 - ARPS Library

! Purpose

Create a skeleton Nmap Scripting Engine library in LUA. You'll need to make sure the library is in the `nmap/nselib` folder.

! Steps

# Make sure we're in the `~/Labs` folder: `cd ~/Labs`
# Using VS Code we can create our new library: `code ./nmap/nselib/arps.lua`
# Next we need to add some other libraries and the actual ARPS class:<span>

```lua
local nmap = require "nmap"
local stdnse = require "stdnse"
local string = require "string"
local table = require "table"
_ENV = stdnse.module("arps", stdnse.seeall)

ARPS = {
    KEY    = 0x31,
    HEADER = stdnse.fromhex("80"),

    -- This is our new class function
    new = function(self, socket)
        local o = {
         socket = socket or nmap.new_socket(),
         seq = 2,
        }
        setmetatable(o, self)
        self.__index = self
        return o
      end,
}

return _ENV
```
</span>
This creates our ARPS object and gives it some variables we can work with, `self.KEY`, `self.HEADER`, `self.socket` and `self.seq`. We would use this in a script like `local arps = arps.ARPS:new()`

''Now we need to fill in rest of our library with some skeleton functions''

!! Functions

# After `end,` but before `}` copy and paste the following:

```lua
    initiate = function(self, host, port)
    end,

    disconnect = function(self)
    end,

    increment_sequence = function(self)
    end,

    send_data = function(self, data)
    end,

    get_data = function(self)
    end,

    xor = function(self, data)
    end,

    send_command = function(self, command)
    end,

    logon = function(self, username, password)
    end,
```

Time to start populating our functions.

!! Initiate and Disconnect

The initiate function just initiates the connection, using the code from the previous lab we can easily populate this function.

# Inside the initiate function we place the following:<span>

```lua
    local status, err = sock:connect(host, port, "tcp")
    if not status then
      stdnse.debug("Error connecting")
      return false, err
    end

    status, bytes = sock:receive()
    if not status then return false, bytes end
    
    if bytes == stdnse.fromhex("80017c7462626678657965797473746265") then
      -- Send handshake response
      status, err = sock:send(stdnse.fromhex("80027578747d787a7465797463746265"))
      if not status then return false, err end

      -- Get the initial screen
      status, bytes = sock:receive()
      if not status then return false, bytes end
```
</span>
# Replace `sock:` with `self.socket:`
# at the end of this snippet we add `end`
# after the added `end` we add `return status, bytes`
after which that section should now look like: 

```lua
    initiate = function(self, host, port)
      local status, err = self.socket:connect(host, port, "tcp")
      if not status then
        stdnse.debug("Error connecting")
        return false, err
      end

      status, bytes = self.socket:receive()
      if not status then return false, bytes end
      
      if bytes == stdnse.fromhex("80017c7462626678657965797473746265") then
        -- Send handshake response
        status, err = self.socket:send(stdnse.fromhex("80027578747d787a7465797463746265"))
        if not status then return false, err end

        -- Get the initial screen
        status, bytes = self.socket:receive()
        if not status then return false, bytes end
      end
      return status, bytes
    end,
```

And since we're here lets make the disconnect function, add the following two lines to the disconnect function:

```lua
      if self.socket then self.socket:close() end
      self.seq = 2
      return
```

Finally lets add some comments to make this easier to use

# At the top of the document add the following comments and change your name and date as needed:

```lua
---
-- Library methods for handling ARPS, creating and parsing packets.
--
-- @author <your name>
-- @copyright Same as Nmap--See https://nmap.org/book/man-legal.html
--
-- Summary
-- Implements an ARPS/DC31 object
--
-- <code>
-- local arps = ARPS:new()
-- status, err = arps:initiate(host, port)
-- status, reply = arps:send_command("version")
-- status, reply = arps:logon("version")
-- </code>

-- Created <date> - v0.1
```

For the initiate function we should add a comment as well, add this comment right above `initiate = function(self, host, port)`:

```lua
--- Initiate a Connection to a ARPS Server
-- @param host The nmap host passed to the action section
-- @param port The nmap port passed to the action section
-- @return status, bytes/error Returns the results, true or false, and also the bytes received or the error message
```

So now our arps.lua library should look something like this:

```lua
---
-- Library methods for handling ARPS, creating and parsing packets.
--
-- @author <your name>
-- @copyright Same as Nmap--See https://nmap.org/book/man-legal.html
--
-- Summary
-- Implements an ARPS/DC31 object
--
-- <code>
-- local arps = ARPS:new()
-- status, err = arps:initiate(host, port)
-- status, reply = arps:send_command("version")
-- status, reply = arps:logon("version")
-- </code>

-- Created <date> - v0.1

local nmap = require "nmap"
local stdnse = require "stdnse"
local string = require "string"
local table = require "table"
_ENV = stdnse.module("arps", stdnse.seeall)

ARPS = {
    KEY    = 0x31,
    HEADER = stdnse.fromhex("80"),

    -- This is our new class function
    new = function(self, socket)
        local o = {
         socket = socket or nmap.new_socket(),
         seq = 2,
        }
        setmetatable(o, self)
        self.__index = self
        return o
    end,

    --- Initiate a Connection to a ARPS Server
    -- @param host The nmap host passed to the action section
    -- @param port The nmap port passed to the action section
    -- @return status, bytes/error Returns the results, true or false, and also the bytes received or the error message

    initiate = function(self, host, port)
      local status, err = self.socket:connect(host, port, "tcp")
      if not status then
        stdnse.debug("Error connecting")
        return false, err
      end

      status, bytes = self.socket:receive()
      if not status then return false, bytes end
      
      if bytes == stdnse.fromhex("80017c7462626678657965797473746265") then
        -- Send handshake response
        status, err = self.socket:send(stdnse.fromhex("80027578747d787a7465797463746265"))
        if not status then return false, err end

        -- Get the initial screen
        status, bytes = self.socket:receive()
        if not status then return false, bytes end
      end
      return status, bytes
    end,

    disconnect = function(self)
      if self.socket then self.socket:close() end
      self.seq = 2
      return
    end,

    increment_sequence = function(self)
    end,

    send_data = function(self, data)
    end,

    get_data = function(self)
    end,

    xor = function(self, data)
    end,

    send_command = function(self, command)
    end,

    logon = function(self, username, password)
    end,
}

return _ENV
```

!! Testing The Script

Now we save the script and we can test it for any syntax issues:

# Save the script in VS Code
# Add the following to `arps-command-enum.nse`: `local arps = require "arps"`
# Run the nmap script: `./nmap/nmap -p 31336 --script arps-command-enum.nse`

Check the output, if you get no errors congrats! If you have errors try solving them yourself then put up your hand. 
